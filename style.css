/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul,
ol {
  padding: 0;
  list-style: none;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  -webkit-text-decoration-skip: ink;
          text-decoration-skip-ink: auto;
}

a {
  text-decoration: none;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }
  *,
*::before,
*::after {
    -webkit-animation-duration: 0.01ms !important;
            animation-duration: 0.01ms !important;
    -webkit-animation-iteration-count: 1 !important;
            animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
/*
  The following two functions are used to convert pixel values to rem and em values.
  Only intended to be used in instances where designs call for very specific px values that are non-standard.
  Please use rem and em values by default where possible without using this as a conversion tool.
*/
/*
  Generates a media query according to either a breakpoint or a numerical unit.
  Checks the breakpoints map.
  Checks if the numerical value has a valid unit attached to it.
  Converts all px values entered to em values.
*/
.clr-primary-blue {
  color: hsl(223deg, 87%, 63%);
}

.bg-primary-blue {
  background-color: hsl(223deg, 87%, 63%);
}

.clr-accent-blue {
  color: hsl(223deg, 100%, 88%);
}

.bg-accent-blue {
  background-color: hsl(223deg, 100%, 88%);
}

.clr-accent-red {
  color: hsl(354deg, 100%, 66%);
}

.bg-accent-red {
  background-color: hsl(354deg, 100%, 66%);
}

.clr-neutral-100 {
  color: hsl(0deg, 0%, 100%);
}

.bg-neutral-100 {
  background-color: hsl(0deg, 0%, 100%);
}

.clr-neutral-200 {
  color: hsl(0deg, 0%, 59%);
}

.bg-neutral-200 {
  background-color: hsl(0deg, 0%, 59%);
}

.clr-neutral-400 {
  color: hsl(209deg, 33%, 12%);
}

.bg-neutral-400 {
  background-color: hsl(209deg, 33%, 12%);
}

/* Hiding class, making content visible only to screen readers but not visually */
/* "sr" meaning "screen-reader" */
.sr-only:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  -webkit-clip-path: inset(50%);
          clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}/*# sourceMappingURL=style.css.map */